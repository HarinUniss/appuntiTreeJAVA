METODI
    (funzioni in c)blocchi istruzioni per rappresentare il comportamento di classi di oggetti


DEFINIRE UN METODO

    [public|protected|private] [static] [final] Tipo nomeMetodo([Tipo1 parametro1, Tipo2 parametro2, ..., TipoN parametroN])
    	[throws Eccezione1, Eccezzione2, ...] {
    		// blocco di codice appartenente al metodo
    	return varTipo;
    }
    //roba tra parentesi quadre é opzionale
    // throws parte che si occupa delle eccezioni e della gestione degli errori

            ESEMPO UTILIZZO throws
                    public double areaParallelogramma(double base, double altezza)
                    		throws IllegalArgumentException {
                    	if(base < 0)
                    		throw new IllegalArgumentException("base negativa");
                    	if(altezza < 0)
                    		throw new IllegalArgumentException("altezza negativa");
                    	if(base == 0.0 || altezza == 0.0)
                    		return 0.0;
                    	double a = base * altezza;
                    	return a;
                    }
                    //throw termina l’esecuzione del blocco corrente come return
                    //ma senza che debba essere specificato un valore di ritorno.


CHIAMATA DI METODO SENZA ERGOMENTO

        public class HelloWorld {   //dichiaro la classe

            /* dichiaro il main */
            public static void main(String[] args) {
                    printHello();   //il main invoca un metoodo esterno printHello() con nessun argomento che stamperá Hello World
            }

            /* il metodo che devo chiamare all'interno del main */
            private static void printHello(){

                System.out.println("Hello World!");     // eseguo la stampa

            }

        }


CHIAMATA DI METODO CON ARGOMENTO

        public class HelloWorld {   //dichiaro la classe

            /* dichiaro il main */
            public static void main(String[] args) {

                    printHello("World");        //il main invoca un metoodo esterno printHello() con argomento che stamperá Hello World

            }

            /* il metodo che devo chiamare all'interno del main */
            private static void printHello( String nomeArgomento){

                System.out.println("Hello " + nomeArgomento );     // eseguo la stampa

            }

        }


FIRMA DEL METODO

    In una classe posso avere PIU metodi con lo stesso nome ma che ricevono argomenti
                                                                differenti o non ne ricevono.

    quando si chiama il metodo , verrá chiamato il metodo contenete i paramettri di tipo corretto

OVERLOADING
    consente di “sovraccaricare” un metodo di una classe con diverse varianti,
                                        in base ai parametri passati come riferimento.

    ES:
        public class Prodotto
        {
            private int id;
            // ...
            public Prodotto(int id, String desc)
            {
                // ...
            }
            public Prodotto(int id, String desc1, String desc2)
            {
                // ...
            }
            public Prodotto(int id, String desc1, String desc2, String desc3)
            {
                // ...
            }

VARARGS
    Ti consentono di passare qualsiasi numero di oggetti di un tipo specifico

    Utilizzando il modificatore … (puntini sospensivi) è possibile definire la presenza di un numero variabile di argomenti.




        	public void stampaLista(String... list) {

                //...

        	}

--------------------------------------------------------------------------------------------------------------------------------
DICHIARAZIONE DI UN METODO

    es:
        public static void displayPerimetro();{
            int perimetro = 2*(1+2);
            System.out.println(perimetro);  // -> 6
        }

FUNZIONE CON DEI PARAMETRI O ARGOMENTI

    I parametri sono variabili elencate nell'istruzione function e
                sono specificati tra parentesi con il nome e il tipo.

    ES:
        public static void displayPerimetro( int larghrzza , int altezza ){
            int perimetro = 2 * ( larghezza + altezza );
            System.out.println(perimetro);
            // Il valore che viene stampato dipende dai valori altezza e larghezza
        }

DEFINIRE UN VALORE DI RITORNO

    Per impostare un valore restituito, è necessario:

        1 Modificare l'istruzione della funzione per indicare che si prevede che restituisa un risultato
                                                ( togliere void e specificare il tipo che deve restituire ).

        2 Terminare la funzione con la parola chiave."return"

        ES: restituisce un int
                           |
                           v
            public static int sum(int a, int b){
                return a + b;   // restituisce il valore a+b
            }



DIFFERENZA TRA TIPI VALORE E TIPI DI RIFERIMENTO

    TIPI VALORE
            Se si crea un TIPO VALORE "int" e quindi la si assegna a un'altra variabile,
            il valore della prima variabile verrà copiato nella seconda:


                int a = 10;
                int b = a;      // b=10

            Poiché "int" è un TIPO VALORE, una copia del valore di viene assegnata a.
            Ciò significa che se in seguito si modifica il valore di (a), il valore di (b) non verrà modificato.

                a = 15;
                System.out.println(a); // -> 15
                System.out.println(b); // -> 10

    TIPI DI RIFERIMENTO (PUNTATORI)
            Quando si crea una variabile e le si assegna un'istanza di classe,
            l'oggetto viene creato, ma la variabile stessa contiene un RIFERIMENTO all'oggetto istanziato.
            (RIFERIMENTO alla posizione in cui viene archiviato l'oggetto nella memoria).

            Quando si assegna il valore di questa variabile a un'altra variabile,
                l'oggetto stesso NON verrà copiato e la nuova variabile MA!!! conterrà un RIFERIMENTO a tale oggetto (lo stesso indirizzo).

            ES:
                public class Car {      //creo la classe Car
                    String color = "red";
                }

                Car auto = new Car();   //creo un puntatore che punta allo oggetto auto di tipo Car
                Car autoDaPitturare = auto; //creo un puntatore che punta allo stesso oggetto auto di tipo Car

                System.out.println(auto.color); // -> red
                System.out.println(autoDaPitturare.color); // -> red

                carToPaint.color = "yellow";    //cambio il colore dell'auto (cambio il colore di )

                System.out.println(auto.color); // -> yellow
                System.out.println(autoDaPitturare.color); // -> yellow  sia il colore di "auto" che quello di "autoDaPitturare" cambiano colore perche puntano allo stesso oggetto

            QUANDO SI DANNO COME ARGOMENTI DEI TIPI DI RIFERIMENTO
                    le operazioni interne alla funzione che li riceve potrebbero MODIFICARE L'OGGETTO!!!










